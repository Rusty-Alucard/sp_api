// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Coach struct {
	ID           string   `json:"id"`
	Name         string   `json:"name"`
	Birthday     string   `json:"birthday"`
	JoinedEvents []*Event `json:"joinedEvents"`
}

type Event struct {
	ID           string   `json:"id"`
	Name         string   `json:"name"`
	NameJp       string   `json:"name_jp"`
	Participants []*Team  `json:"participants"`
	Matches      []*Match `json:"matches"`
}

type Match struct {
	ID        string        `json:"id"`
	Stadium   *Stadium      `json:"stadium"`
	Kickoff   time.Time     `json:"kickoff"`
	Category  MatchCategory `json:"category"`
	Matchups  []*Team       `json:"matchups"`
	Timelines []*Timeline   `json:"timelines"`
}

type Player struct {
	ID           string   `json:"id"`
	Name         string   `json:"name"`
	Number       int      `json:"number"`
	Birthday     string   `json:"birthday"`
	JoinedEvents []*Event `json:"joinedEvents"`
}

type Stadium struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Venue     string  `json:"venue"`
	DelayHour float64 `json:"delay_hour"`
}

type Team struct {
	ID            string        `json:"id"`
	FifaTrigramme string        `json:"fifa_trigramme"`
	Name          string        `json:"name"`
	NameJp        string        `json:"name_jp"`
	Confederation Confederation `json:"confederation"`
	JoinedEvents  []*Event      `json:"joinedEvents"`
	Coach         *Coach        `json:"coach"`
	Members       []*Player     `json:"members"`
}

type Timeline struct {
	ID     string         `json:"id"`
	Type   MatchEventType `json:"type"`
	Time   string         `json:"time"`
	Player *Player        `json:"player"`
}

type Confederation string

const (
	ConfederationCaf      Confederation = "CAF"
	ConfederationConcacaf Confederation = "CONCACAF"
	ConfederationConmebol Confederation = "CONMEBOL"
	ConfederationOfc      Confederation = "OFC"
	ConfederationAfc      Confederation = "AFC"
	ConfederationUefa     Confederation = "UEFA"
)

var AllConfederation = []Confederation{
	ConfederationCaf,
	ConfederationConcacaf,
	ConfederationConmebol,
	ConfederationOfc,
	ConfederationAfc,
	ConfederationUefa,
}

func (e Confederation) IsValid() bool {
	switch e {
	case ConfederationCaf, ConfederationConcacaf, ConfederationConmebol, ConfederationOfc, ConfederationAfc, ConfederationUefa:
		return true
	}
	return false
}

func (e Confederation) String() string {
	return string(e)
}

func (e *Confederation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Confederation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Confederation", str)
	}
	return nil
}

func (e Confederation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MatchCategory string

const (
	MatchCategoryGroupLeague     MatchCategory = "GroupLeague"
	MatchCategoryRoundOf16       MatchCategory = "RoundOf16"
	MatchCategoryQuarterFinals   MatchCategory = "QuarterFinals"
	MatchCategorySemiFinals      MatchCategory = "SemiFinals"
	MatchCategoryPlayoffForThird MatchCategory = "PlayoffForThird"
	MatchCategoryFinal           MatchCategory = "Final"
)

var AllMatchCategory = []MatchCategory{
	MatchCategoryGroupLeague,
	MatchCategoryRoundOf16,
	MatchCategoryQuarterFinals,
	MatchCategorySemiFinals,
	MatchCategoryPlayoffForThird,
	MatchCategoryFinal,
}

func (e MatchCategory) IsValid() bool {
	switch e {
	case MatchCategoryGroupLeague, MatchCategoryRoundOf16, MatchCategoryQuarterFinals, MatchCategorySemiFinals, MatchCategoryPlayoffForThird, MatchCategoryFinal:
		return true
	}
	return false
}

func (e MatchCategory) String() string {
	return string(e)
}

func (e *MatchCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MatchCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MatchCategory", str)
	}
	return nil
}

func (e MatchCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MatchEventType string

const (
	MatchEventTypeGoal            MatchEventType = "Goal"
	MatchEventTypePenaltyGoal     MatchEventType = "PenaltyGoal"
	MatchEventTypePenaltyMiss     MatchEventType = "PenaltyMiss"
	MatchEventTypeOwnGoal         MatchEventType = "OwnGoal"
	MatchEventTypeYellowCard      MatchEventType = "YellowCard"
	MatchEventTypeSecondYellow    MatchEventType = "SecondYellow"
	MatchEventTypeRedCard         MatchEventType = "RedCard"
	MatchEventTypeSubstitutionIn  MatchEventType = "SubstitutionIn"
	MatchEventTypeSubstitutionOut MatchEventType = "SubstitutionOut"
	MatchEventTypeVar             MatchEventType = "VAR"
)

var AllMatchEventType = []MatchEventType{
	MatchEventTypeGoal,
	MatchEventTypePenaltyGoal,
	MatchEventTypePenaltyMiss,
	MatchEventTypeOwnGoal,
	MatchEventTypeYellowCard,
	MatchEventTypeSecondYellow,
	MatchEventTypeRedCard,
	MatchEventTypeSubstitutionIn,
	MatchEventTypeSubstitutionOut,
	MatchEventTypeVar,
}

func (e MatchEventType) IsValid() bool {
	switch e {
	case MatchEventTypeGoal, MatchEventTypePenaltyGoal, MatchEventTypePenaltyMiss, MatchEventTypeOwnGoal, MatchEventTypeYellowCard, MatchEventTypeSecondYellow, MatchEventTypeRedCard, MatchEventTypeSubstitutionIn, MatchEventTypeSubstitutionOut, MatchEventTypeVar:
		return true
	}
	return false
}

func (e MatchEventType) String() string {
	return string(e)
}

func (e *MatchEventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MatchEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MatchEventType", str)
	}
	return nil
}

func (e MatchEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Position string

const (
	PositionGk Position = "GK"
	PositionDf Position = "DF"
	PositionMf Position = "MF"
	PositionFw Position = "FW"
)

var AllPosition = []Position{
	PositionGk,
	PositionDf,
	PositionMf,
	PositionFw,
}

func (e Position) IsValid() bool {
	switch e {
	case PositionGk, PositionDf, PositionMf, PositionFw:
		return true
	}
	return false
}

func (e Position) String() string {
	return string(e)
}

func (e *Position) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Position(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Position", str)
	}
	return nil
}

func (e Position) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
